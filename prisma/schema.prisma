// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id         String        @id @default(uuid())
  name       String
  fee        Float // default value for Offering
  note       String? // default value for Offering
  deadline   DateTime // default value for Offering
  imageRatio String // default value for Offering
  status     ProjectStatus @default(OFFERING)
  teamId     String?
  imageCount Int           @default(1)

  createdAt DateTime  @default(now())
  doneAt    DateTime?

  isPaid    Boolean @default(false)
  payrollId String?

  offering Offering[]

  payroll Payroll? @relation(fields: [payrollId], references: [id])
  team    Team?    @relation(fields: [teamId], references: [id])

  @@index([id])
  @@index([teamId])
  @@index([payrollId])
}

model Team {
  id                String     @id @default(uuid())
  name              String
  bankNumber        String?
  bankAccountHolder String?
  bankProvider      String?
  offering          Offering[]
  project           Project[]
  payroll           Payroll[]

  @@index([id])
}

model Offering {
  id        String @id @default(uuid())
  projectId String
  teamId    String

  confirmationDuration Int      @default(0) // millisecond
  fee                  Int
  note                 String
  deadline             DateTime
  imageRatio           String

  stage   OfferingStage
  team    Team          @relation(fields: [teamId], references: [id])
  project Project       @relation(fields: [projectId], references: [id])

  @@index([id])
  @@index([projectId])
  @@index([teamId])
}

model Payroll {
  id          String        @id @default(uuid())
  periodStart DateTime
  periodEnd   DateTime
  amount      Int
  teamId      String
  projects    Project[]
  status      PayrollStatus @default(DRAFT)
  team        Team          @relation(fields: [teamId], references: [id])
  createdAt   DateTime      @default(now())
  deletedAt   DateTime?

  @@index([id])
  @@index([teamId])
}

enum OfferingStage {
  OFFERING
  REJECTED

  IN_PROGRESS
  REVISION

  DONE

  @@map("Stage")
}

enum PayrollStatus {
  DRAFT
  PAID
}

enum ProjectStatus {
  OFFERING
  IN_PROGRESS
  REVISION
  DONE
}
