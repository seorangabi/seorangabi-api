// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String
  verified Boolean
}

model Project {
  id         String        @id @default(uuid())
  name       String
  fee        Float // total fee from tasks
  imageCount Int           @default(0)
  deadline   DateTime
  imageRatio String
  status     ProjectStatus @default(OFFERING)
  teamId     String?
  clientName String
  note       String?

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  doneAt    DateTime?

  isPaid    Boolean @default(false)
  payrollId String?

  confirmationDuration Int @default(0) // millisecond

  offering Offering[]

  payroll Payroll? @relation(fields: [payrollId], references: [id])
  team    Team?    @relation(fields: [teamId], references: [id])
  tasks   Task[]

  @@index([id])
  @@index([teamId])
  @@index([payrollId])
}

model Team {
  id                String     @id @default(uuid())
  name              String
  bankNumber        String?
  bankAccountHolder String?
  bankProvider      String?
  offering          Offering[]
  project           Project[]
  payroll           Payroll[]
  discordUserId     String
  discordChannelId  String
  deletedAt         DateTime?
  role              TeamRole   @default(ARTIST)

  @@index([id])
}

model Offering {
  id              String         @id @default(uuid())
  projectId       String
  teamId          String
  status          OfferingStatus @default(OFFERING)
  discordThreadId String

  team      Team     @relation(fields: [teamId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())

  @@index([id])
  @@index([projectId])
  @@index([teamId])
}

model Payroll {
  id          String        @id @default(uuid())
  periodStart DateTime
  periodEnd   DateTime
  amount      Int
  teamId      String
  projects    Project[]
  status      PayrollStatus @default(DRAFT)
  team        Team          @relation(fields: [teamId], references: [id])
  createdAt   DateTime      @default(now())
  deletedAt   DateTime?

  @@index([id])
  @@index([teamId])
}

model Task {
  id            String           @id @default(uuid())
  fee           Int
  note          String
  imageCount    Int
  project       Project          @relation(fields: [projectId], references: [id])
  projectId     String
  createdAt     DateTime         @default(now())
  attachmentUrl String // TODO: Delete soon
  attachments   TaskAttachment[]

  @@index([id])
  @@index([projectId])
}

model TaskAttachment {
  id     String @id @default(uuid())
  url    String
  Task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  @@index([id])
  @@index([taskId])
}

model StatisticVisitor {
  id      String   @id @default(uuid())
  date    DateTime // Only date
  count   Int
  country String   @default("Indonesia")

  @@index([country])
}

model StatisticPunchMyHead {
  id      String   @id @default(uuid())
  date    DateTime // Only date
  count   Int
  country String   @default("Indonesia")

  @@index([country])
}

enum PayrollStatus {
  DRAFT
  PAID
}

enum ProjectStatus {
  OFFERING
  IN_PROGRESS
  REVISION
  DONE
  CANCELLED
}

enum OfferingStatus {
  OFFERING
  REJECTED
  ACCEPTED
}

enum TeamRole {
  ADMIN
  ARTIST
  CODER
}
